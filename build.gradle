plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = mod_version
group = 'plus.dragons.createenchantmentindustry'
archivesBaseName = "create_enchantment_industry-${artifact_minecraft_version}-for-create-${create_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg '-mixin.config=create_enchantment_industry.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.enabledGameTestNamespaces', 'create_enchantment_industry'

            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg '-mixin.config=create_enchantment_industry.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'create_enchantment_industry'

            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'create_enchantment_industry',
                 '--all', '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/'),
                 '--existing-mod', 'create'

            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }
    }
}


repositories {
    maven {
        name 'Tterrag Maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'The Illusive C4 Maven'
        url 'https://maven.theillusivec4.top/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}-${create_version_build}:all") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api")
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'create_enchantment_industry.refmap.json'
    config 'create_enchantment_industry.mixins.json'

    debug.verbose = true
    debug.export = true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "create_enchantment_industry",
                "Specification-Vendor"    : "dragonsplus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "dragonsplus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'create_enchantment_industry.mixins.json'
        ])
    }
}

void addLicense(jarTask) {
    jarTask.from('LICENSE')
}

jar.finalizedBy('reobfJar')

addLicense(jar)

curseforge {
    if (System.getenv('CURSEFORGE_API_KEY') != null && project.hasProperty('cf_project_id')) {
        apiKey = System.getenv("CURSEFORGE_API_KEY")
        project {
            id = project.cf_project_id
            releaseType = project.cf_release_type
            if (project.hasProperty('cf_game_versions')) {
                def gameVersions = project.cf_game_versions.split(", ")
                gameVersions.each { String gameVersion ->
                    addGameVersion gameVersion
                }
            }
            if (project.hasProperty('cf_java_versions')) {
                def gameVersions = project.cf_java_versions.split(", ")
                gameVersions.each { String gameVersion ->
                    addGameVersion gameVersion
                }
            }
            addGameVersion project.cf_modloader
            mainArtifact(jar) {
                displayName = "CEI ${mod_version} for Create ${artifact_minecraft_version}-${create_version}"
                relations {
                    if(project.hasProperty('cf_required_dependencies')) {
                        project.cf_required_dependencies.split(", ").each { String slug ->
                            requiredDependency slug
                        }
                    }
                }
            }
            changelog = file("${projectDir}/changelog/${mod_version}.md")
            changelogType = 'markdown'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
